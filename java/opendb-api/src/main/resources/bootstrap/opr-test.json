{
	"block_id":-1,
	"date":"2019-02-15T00:00:00.000Z",
	"ops": [
		// test double objects could not be created
		{"type" : "sys.role","new" : [{ "id" : ["none5"]}, { "id" : ["none4"]}]},
		// test none could not be created
		{"type" : "sys.role","new" : [{ "id" : ["none"]} ]},

		// ROLES & Grant
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["check_role_assigned_and_signed"],
				"type" : ["sys.grant"],
				"comment" : "Check that role is assigned by person who has it. Check that Owner role could change that validation.",
				"owner_role" : "owner",
				"validate" : [
					"auth:has_sig_roles(std:set_minus(.roles, .old.roles))",
					"auth:has_sig_roles(std:set_minus(.old.roles, .roles))"
				]
			}]
		},


		// LOGIN & SIGNUP
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["check_login_signup_by_administrator"],
				"type" : ["sys.login", "sys.signup"],
				"comment" : "Check that only administrator could signup and login users",
				"owner_role" : "master",
				"validate" : [
					"auth:has_sig_roles('administrator')"
				]
			}]
		},

		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["login_should_reference_its_signup"],
				"type" : ["sys.login"],
				"comment"   : "Every login should reference signup (that validates signup is active)",
				"owner_role" : "none",
				"validate" : [
					"std:eq(.ref.s.type, 'sys.signup')",
					"std:eq(.new.id.0, .ref.s.signup.id.0)"
				]
			}]
		},



		///////// TODO 4
		// auth_method=provided: signup - 0 - signed by itself; login - 0 signed by itself [owner='none']
		// auth_method=pwd: signup, 0 - signed by itself; login - 0 signed by itself [owner='owner']
		// auth_method=oauth: no rules it is regulated by administrator
		// 1. TODO if auth_method  provided
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["check_self_signed_login_signup"],
				"type" : ["sys.login"],
				"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
				"owner_role" : "none",
				"if" :  [
					"std:eq(s.auth_method,'provided')"
				],
				"validate" : [
					"std:in(.new.id, .signed_by)",
					"std:in(.signed_by, s.signup.signed_by)",
					"auth:has_sig_user(.name, .signup)"
				]
			}]
		},
		// 1. TODO if auth_method  provided signup user
		{
			"operation" : "sys:op_validate",
			"name" : "check_self_signed_login_signup",
			"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"operations" : "sys:login",
			"if" :  {
				".auth_method" : ["provided"]
			},
			"validate" : [
				"auth:has_sig_user(.name, .signup)"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name"		: "check_self_signed_login_signup",
			"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"operations" : ["sys:login", "sys:signup"],
			"if" :  {
				".auth_method" : ["pwd"]
			},
			"validate" : [
				"auth:has_sig_any_user(.name, 'signup')"
			]
		},








		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["validate_op_type_registered_easy"],
				"type" : ["*"],
				"comment" : "Validate that operation is registered - TODO delete",
				"role" : "owner",
				"validate" : [
					"blc:find('sys.operation',.type)"
				]
			}]
		}	

	]
}