{
	"block_id":-1,
	"date":"2019-02-15T00:00:00.000Z",
	"ops": [

		{
			"type" : "sys.role",
			"new" : [{ 
				"id" : ["none"]
			}]
		},		

		// 	1."comment"   : "Check that only registrator could signup and login users",
		// if(type == 'sys:login' || type == 'sys:signup' ) { has_role('registrator', this.signed_by)) }

		// 2. check_self_signed_login_signup
		// if(type == 'sys:login' && "link.signup.auth_method" == "provided")
		// intersects_not_empty(this.signed_by, link.signup.signed_by)


		// "usr:balance", "new" : { "id" : "$usr:$asset:$", "asset" }
		// validation: sum(old.balance) = new.0.balance + new.1.balance
	

		{
			"operation" : "sys:op_validate",
			"name" : "check_role_assigned_and_signed",
			"comment" : "Check if role assigned by person who has it. Master role could change validation.",
			"owner_role" : "master",
			"operations" : ["sys:grant"],
			"if" : {},
			"validate" : [
				"auth:has_sig_all_roles(.roles)",
				"auth:has_sig_all_roles(old.roles)"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name"		: "check_login_signup_by_registrator",
			"comment"   : "Check that only registrator could signup and login users",
			"owner_role" : "master",
			"operations" : ["sys:login", "sys:signup"],
			"if" :  {},
			"validate" : [
				"auth:has_sig_role('registrator')"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name" : "login_should_reference_its_signup",
			"comment"   : "Every login should reference signup",
			"owner_role" : "none",
			"operations" : ["sys:login"],
			"validate" : [
				"std:type(s, 'sys:signup')",
				"std:eq(new.id.0, s.signup.id)"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name" : "check_self_signed_login_signup",
			"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"operations" : ["sys:login"],
			"if" :  {
				"s.auth_method" : ["provided"]
			},
			"validate" : [
				"std:in(new.name, .signed_by)",
				"std:in(.signed_by, s.signup.signed_by)"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name" : "check_self_signed_login_signup",
			"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"operations" : "sys:login",
			"if" :  {
				".auth_method" : ["provided"]
			},
			"validate" : [
				"auth:has_sig_user(.name, .signup)"
			]
		},
		{
			"operation" : "sys:op_validate",
			"name"		: "check_self_signed_login_signup",
			"comment"   : "Check that signup is signed by itself and login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"operations" : ["sys:login", "sys:signup"],
			"if" :  {
				".auth_method" : ["pwd"]
			},
			"validate" : [
				"auth:has_sig_any_user(.name, 'signup')"
			]
		},



		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["validate_op_type_registered_easy"],
				"type" : ["*"],
				"comment" : "Validate that operation is registered - TODO delete",
				"role" : "owner",
				"validate" : [
					"blc:find('sys.operation',.type)"
				]
			}]
		},

		{
			"operation" : "op:splitfunds",
			"name" : "auth:login",
			"identity" : ".name",
			"owner_role" : "TODO",
			"validation" : {
				"new" : {
					"signature_all" : [
						{ "req_sig_login:financial" : ".from" },
						{ "req_sig_role" : "registrator" }
					]
				},
				"edit" : {
					"impossible" : "none"
				}
			}
		},
		{
			"operation" : "user:vote",
			"name" : "op:operation",
			"owner_role" : "TODO",
			"identity" : ".nickname .topic",
			"EDIT" : "????? only owner ????",
			"new" : {
				"signature_all" : [
					{ "req_sig_login" : ".name" },
					{ "req_sig_role" : "vote_approval" }
				]
			},
		}


	]
}