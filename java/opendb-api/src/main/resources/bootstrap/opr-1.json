{
	"block_id":-1,
	"date":"2019-02-15T00:00:00.000Z",
	"ops": [
		{
			"type" : "sys.signup",
			"signed_by": "openplacereviews",
			"new": [{	
				"id": ["openplacereviews"],
				"name" : "openplacereviews",
				"algo": "EC",
				"auth_method": "provided",
				"pubkey": "base64:X.509:MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEOR7zRAwYHy2vmJhOxrwNCUGI23NldhKV+kuBK5Jsah2gyHX4jNqkryksrmNHUjFogNttjilhFwG78HT64KLgcw=="
			}],
			"hash": "json:sha256:10c5978d2466b67505d2d94a9a0f29695e03bf11893a4a5cac3cd700aa757dd9",
			"signature": "ECDSA:base64:MEUCIQDjwKWF4BTeDdILZKq51eBt7VW0fkCBggCT0DDRd7hpFgIgdnKccY5yMoHaL2FWbMWqGZlvzvF76oacrlbqBmQDYBo="
		},
		{
			"type" : "sys.login",
			"signed_by": "openplacereviews",
			"ref" : {
				"s" : ["sys.signup","openplacereviews"]
			},
			"new" : [{	
				"id" : ["openplacereviews","test_1"],
				"algo" : "EC",
				"auth_method" : "provided",
				"pubkey": "base64:X.509:XXXwEAYHKoZIzj0CAQYFK4EEAAoDQgAETxKWXg3jhSxBtYhTxO/zMj6S0jO95ETUehlZ7yR150gFSmxqJcLE4YQDZ6t/Hn13kmaZbhSFMNsAX+kbeUMqb=="
			}],
			"hash": "json:sha256:fefffd95ccaa8b2545f2c5b8e1e7ae8c7d8f530b8d61be60df2345d74102c802",
			"signature": "ECDSA:base64:MEUCIQDbaIttXUkJCqiR61b39u6xr9xxOPw/XOM2no+04XrPlgIgOrAwPOVIh9oL8wb4FvWA0Fcx0SpqOK6P3GfPHLmTQ60="
		},
		{
			"type" : "sys.login",
			"signed_by": "openplacereviews",
			"ref" : {
				"s" : ["sys.signup","openplacereviews"]
			},
			"old" : ["fefffd95ccaa8b2545f2c5b8e1e7ae8c7d8f530b8d61be60df2345d74102c802:0"],
			"new": [{	
				"id": ["openplacereviews","test_1"],
				"algo": "EC",
				"auth_method": "provided",
				"pubkey": "base64:X.509:MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAETxKWXg3jhSxBtYhTxO/zMj6S0jO95ETUehlZ7yR150gFSmxqJcLE4YQDZ6t/Hn13kmaZbhSFMNsAX+kbeUMqbQ=="
			}],
			
			"hash": "json:sha256:41b132e7832099d14bf501606a969ba2a84ad2c46125b1c6470df709481d94b6",
			"signature": "ECDSA:base64:MEYCIQDCuwakI7jd0bExEDnnKc4X41oS2hbj0XwRfuSgXqu6/gIhAKQSlPt9amGgHz20yiES87vOt4i3/BFDu3IrGgIlz8AM"
		},
		{
			"type" : "sys.grant",
			"ref" : {
				"s" : ["sys.login","openplacereviews","test_1"]
			},
			"new" : [{ 
				"id" : ["openplacereviews:test_1"],
				"roles" : ["master", "administrator"]
			}]
		},
		{
			"type" : "sys.grant",
			"ref" : {
				"s" : ["sys.signup","openplacereviews"]
			},
			"new" : [{ 
				"id" : ["openplacereviews"],
				"roles" : ["owner"]
			}]
		},



		{
			"type" : "sys.operation",
			"new": [{
				"id" : ["sys.operation"],
				"comment" : "Operation to define other operations with description and fields",
				"version" : 0,
				"fields": {
					"id" : "operation name usually written as <package_name>.<op_name>",
					"fields" : "map of fields accepted by operation with their description",
					"arity" : "integer number describing arity of operation, 0 - means that operation could create/delete 0 or 1 object maximum.",
					"comment" : "description of the operation, purpose and how it could be used",
					"version" : "optional int version of the defined operation"	
				}
			}]
		},
		{
			"type" : "sys.operation",
			"new": [{
				"id" : ["sys.signup"],
				"comment" : "Operation to signup new users with different methods such as password, provided secure key or oauth.",
				"version" : 0,
				"arity" : 0,
				"fields": {
					"id" : "unique id of user",
					"algo" : "crypto algorithm of generated public key",
					"auth_method" : "one of 'pwd', 'provided' (provided private key),'oauth' ",
					"keygen_method" : "keygen algorithm of private key from password applicable to .auth_method pwd",
					"oauth_provider" : "one of 'fb', 'osm', 'google'",
					"oauthid_hash" : "hash of 'oauth id + salt' ",
					"pubkey" : "public key to be used to validate signature",
					"salt" : "salt used for private key generation from password and for hash of oauthid_hash",
					"userdetails" : "custom json map of user details"
				}
			}]
		},
		{
			"type" : "sys.operation",
			"new": [{	
				"id" : ["sys.login"],
				"comment" : "Operation to create login pair of private key",
				"version" : 0,
				"arity" : 0,
				"fields": {
					"id" : "combined id 'signup_name':'purpose', purpose could describe website, bot name or application",
					"algo" : "crypto algorithm of generated public key",
					"pubkey" : "public key to be used to validate signature"
				}
			}]
		},
		{
			"type" : "sys.operation",
			"new": [{	
				"id" : ["sys.validate"],
				"comment" : "Operation that defines validation on blockchain operations",
				"version" : 0,
				"arity" : 0,
				"fields": {
					"id" : "Unique name for validation",
					"type" : "Array of operations to which validation is applicable (* is a global)",
					"if" : "Array of preconditions (combined with AND) for validation to be applicable",
					"validate" : "Array of validation rules (all should be evaluated to true or number != 0",
					"role" : "Role of users could change that validation"
				}
			}]
		},
		{
			"type" : "sys.operation",
			"new": [{	
				"id" : ["sys.role"],
				"comment" : "Operation that defines role for user, role restriction are defined by validation operations",
				"version" : 0,
				"arity" : 0,
				"fields": {
					"id" : "Unique role name",
					"owner_role" : "Role that could change this role definition",
					"super_roles" : "Define all roles that are superior than this role, so everybody with a superior role could perform operation with this role."
				}
			}]
		},
		{
			"type" : "sys.operation",
			"new": [{
				"id" : ["sys.grant"],
				"comment" : "Operation that assigns user to a specific role",
				"version" : 0,
				"arity" : 0,
				"fields": {
					"ref.s" : "Login or signup reference",
					"id" : "login or signup named id",
					"roles" : "array of assigned roles"
				}
			}]
		},

		



		{
			"type"  : "sys.role",
			"new" : [{
				"id" : ["owner"],
				"comment" : "Owner role is a super role that nobody could change it",
				"owner_role" : "none",
				"super_roles": []
			}]
		},
		{
			"type" : "sys.role",
			"new" : [{ 
				"id"	: ["master"],
				"comment"   : "Role master and only owner could change it",
				"owner_role" : "owner",
				"super_roles" : ["owner"]
			}]
		},
		{
			"type" : "sys.role",
			"new" : [{ 
				"id"	: ["administrator"],
				"comment"   : "Role administrator for user signup and only owner could change it",
				"owner_role" : "owner",
				"super_roles" : ["master"]
			}]
		},


		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["all_op_type_registered"],
				"type" : ["*"],
				"comment" : "Validate that operation is registered",
				"role" : "owner",
				"validate" : [
					"std:eq(.ref.op.id,.type)"
				]
			}]
		},
		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["all_op_arity_new_del"],
				"type" : ["*"],
				"comment" : "Validate operation arity",
				"role" : "none",
				"if" : [
					"std:eq(.ref.op.arity, 0)"
				],
				"validate" : [
					"std:leq(std:size(.new),1)",
					"std:leq(std:size(.old),1)"
				]
			}]
		},
		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["all_op_arity_same_type_and_id"],
				"type" : ["*"],
				"comment" : "Validate operation arity their types and ids",
				"role" : "none",
				"if" : [
					"std:eq(.ref.op.arity, 0)",
					"std:eq(std:size(.new),1)",
					"std:eq(std:size(.old),1)"
				],
				"validate" : [
					"std:eq(.type,.old.type)",
					"std:eq(.id,.old.id)"
				]
			}]
		},
		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["operation_std_arity_always_0"],
				"type" : ["sys.operation"],
				"comment" : "Validate that for all standard operation arity is always 0 and nobody could change it",
				"role" : "none",
				"if" : [
					"set:in(.type, set:all('sys.operation','sys.validate','sys.role','sys.grant', 'sys.login', 'sys.signup'))",
					"std:eq(std:size(.new),1)"
				],
				"validate" : [
					"std:eq(.new.arity, 0)"
				]
			}]
		},



		{  
			"type" : "sys.validate",
			"new" : [{ 
				"id" : ["sysvalidate_check_previous_role_for_change"],
				"type" : ["sys.validate"],
				"comment" : "Validate validation changes. Check previous role. It is strict and nobody could change it",
				"role" : "none",
				"if" : [
					"std:eq(std:size(.old), 1)"
				],
				"validate" : [
					"auth:has_sig_roles(this, .old.role)"
				]
			}]
		},

		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["role_none_could_not_be_created"],
				"type" : ["sys.role"],
				"comment" : "Check that role none could not be created. Couldn't be changed!",
				"role" : "none",
				"validate" : [
					"std:neq(.new.id, 'none')"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["role_could_be_changed_only_by_owner"],
				"type" : ["sys.role"],
				"comment" : "Check that role none could not be created. Couldn't be changed!",
				"role" : "none",
				"if" : [
					"std:eq(std:size(.old), 1)"
				],
				"validate" : [
					"auth:has_sig_roles(this, .old.owner_role)"
				]
			}]
		},

		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["grant_check_op_role_and_check_assigned_role"],
				"type" : ["sys.grant"],
				"comment" : "Check that role is assigned by person who has it. The role could be revoked or added only if operation is signed by a person who has that role. Check that Owner role could change that validation.",
				"owner_role" : "owner",
				"validate" : [
					"auth:has_sig_roles(this, set:minus(.roles, .old.roles))",
					"auth:has_sig_roles(this, set:minus(.old.roles, .roles))"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["signup_login_only_by_administrator"],
				"type" : ["sys.login", "sys.signup"],
				"comment" : "Check that only administrator could signup and login users",
				"owner_role" : "master",
				"validate" : [
					"auth:has_sig_roles(this, 'administrator')"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["login_should_reference_its_signup"],
				"type" : ["sys.login"],
				"comment"   : "Every login should reference signup (that validates signup is active)",
				"owner_role" : "none",
				"validate" : [
					"std:eq(.ref.s.type, 'sys.signup')",
					"std:eq(.new.id.0, .ref.s.id.0)"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["login_self_signed_provided"],
				"type" : ["sys.login"],
				"comment"   : "Check that signup login is signed by signup key. Nobody could change that rule",
				"owner_role" : "none",
				"if" :  [
					"std:eq(.ref.s.auth_method,'provided')"
				],
				"validate" : [
					"set:in(.ref.s.id, .signed_by)"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["signup_self_signed_provided"],
				"type" : ["sys.signup"],
				"comment"   : "Check that signup is signed by itself. Nobody could change that rule",
				"owner_role" : "none",
				"if" :  [
					"std:eq(.new.auth_method,'provided')"
				],
				"validate" : [
					"set:in(.new.id, .signed_by)"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["login_self_signed_pwd"],
				"type" : ["sys.login"],
				"comment"   : "Check that signup login is signed by signup key. Nobody could change that rule",
				"owner_role" : "owner",
				"if" :  [
					"std:eq(.ref.s.auth_method,'pwd')"
				],
				"validate" : [
					"set:in(.ref.s.id, .signed_by)"
				]
			}]
		},
		{
			"type" : "sys.validate",
			"new" : [{
				"id" : ["signup_self_signed_pwd"],
				"type" : ["sys.signup"],
				"comment"   : "Check that signup is signed by itself. Nobody could change that rule",
				"owner_role" : "owner",
				"if" :  [
					"std:eq(.new.auth_method,'pwd')"
				],
				"validate" : [
					"set:in(.new.id, .signed_by)"
				]
			}]
		}
	]
}